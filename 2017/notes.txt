2017 day 4:
===========

CPP
---
liked:
- quite convenient tools for:
- sorting (sorted string in place)
- constructing a set from vector (just construct with {v.begin(), v.end()})
- liked count_if with my custom predicate
  - using a function pointer stopped working once i got to templates,
    but end result is still ok
    => actually got it to work but needed `is_valid<>`, so great after all
- quite easy to express concepts like hash & equality
- first time declaring a template, but it made sense and was quite easy
- nicely surprised by this:

```
vector<string> split(string s) {
  istringstream is {s};
  return {
    istream_iterator<string>{is},
    istream_iterator<string>{},
  }; // <-- this return is enough to construct a vector of words
}
```

didn't like:
- constantly have to add headers for every single class
- I had to declare both hash & equal types in order to get the "anagram equality"
  working; hard to find this in the documentation

missed:
- getline + vector.push_back is still the best way to read file
  line by line into vector
  - istream_iterator would only split by whitespace
  - decent solution with custom Line type: https://stackoverflow.com/questions/1729772

overall:
- solution looks "clean" imho, feels quite functional too with count_if
  and the predicates and the equality & hash concepts
- surprised along the way with a few moments of "just works"


RUST
----
- functional style filter/map/split/collect feels more natural than CPP
- basics for splitting and filtering feel more "available", "at hand"
- it's more explicit about who owns what
  - in the CPP solution I must admit I don't know when things are moved,
    when they are copied, when I pass by reference etc
  - the Rust one makes it front and center
- I don't understand why the predicate bound got '&&Vec' (why two?)
  - and why it still seems to work? am I working on references to references?
  - makes me uneasy, but mostly because I don't know the ownership well enough yet
- difference:
  - cpp accepts a "quick-and-dirty" way, probably suboptimal in terms of references
    and/or copying; I don't really know who owns and how things are passed, but the end
    code compiles
  - Rust expects to get every last detail of this correct (and with specific rules)
    before it will even compile
- code in Rust looks messier
  - might be due to code highlighting - more colors on screen
  - type annotations
- devdocs for Rust not great
  - left pane unhelpful after narrowing down to a struct or a trait
  - will probably use default docs

liked:
- quick access to split_whitespace, collect, filter
- feels I'm importing less to get the same functionality

didn't like:
- tried same approach as CPP - implement custom hasher for HashSet, but
  somehow this felt harder than CPP


2017 day 5
==========

RUST
----
- reading a file by lines still feels a bit wonky
- but getting the references and mutating the vector
  felt okay, I kind of knew where the & and where the *
  need to go
- I also often have the intuition that compiler won't
  allow something, but I save anyway to see the error
  message and confirm my assumption
- overall this was a very simple one
- indexes are usize, but there were negatives so I picked
  i32, but this means casts are needed a few times
  casts are still a bit weird to me

CPP
---
- reading number via cin >> num is very convenient
  but writing out via cout << << << feels like a chore
- surprised (positively I guess) by the warning
  when comparing int with vector size (comparing ints
  of different signedness)
- assigning a vector to another copies it
  this is convenient, but I still feel I don't know the pattern
  of copy/reference/value etc
  - I guess I'm thinking in java terms where every assignment
    is a reference (I think?)
  - also compared to Rust, an assignment is a move and you
    need to be explicit about copying
  - this gives CPP a head as a "quick and dirty" language
    but perhaps not great for a long term solution, not sure
- no easy way to print out larger structures for debugging
  (a'la Rust's "{:?}")


2017 day 6
==========

CPP
---
- first time implementing the "<<" for my type, but it was nice
- again had to implement hash for my own type and it worked nice
- very much impressed by cin for this kind of input
  - I used std::array for first solution and it was even nicer
    because I could directly cin into array elements in a for..in loop
    (no need for a "buffer" element)
- overall it wasn't getting in my way and I could smoothly iterate
  my way to solution
- going back and adding those includes is tiring
- I think the iterator (cycling back to banks.begin()) worked well.
  Moving the iterator by ++ and comparing to banks.end() is intuitive enough
- after I moved from std::array to std::vector, very minimal work needed to be done
  thanks to the type alias
  - the hash function needed no change
  - the << operator needed no change
  - only had to change the cin reading code

read up on:
- c++ way of defining a type alias
  - "using bank_array = std::vector<int>" works


RUST
----
- implemented pretty much the same thing
- HashSet of Vec<i32> just worked (i.e. no need for custom hash function)
  - but I had to be explicit about .clone()'ing the vectors when inserting and pushing
  - I guess it's a good thing, because the same thing happens in C++
    only here it's explicit so you are immediately aware
  - In C++ it didn't feel so "costly" since I didn't explicitly '.clone()'
- I tried a "cycling iterator" solution, but iter_mut().cycle() doesn't work
  - iter().cycle().skip(pos) sounded really good
  - tried some more to do as_mut() later on but 
- debug build in Rust is faster
- I wanted to find the max element, hopefully get an iterator pointed at it
  and continue from there, but ended up with the 3-step dance:
  - find max element (as i32)
  - find pos of max in vector (as usize)
  - then work manually on the vector usinb banks[pos]
  - it felt like a missed opportunity to continue using the iterator after the find
    (this is what cpp's max_element allowed me to do)
- HashSet.contains asked me for reference to element
  - initially this surprised me, but it's obviously correct (I only want to look
    at the checked element not move it into the set)
  - I'd say this is a plus for Rust as it makes this very visible

implicit things in rust:
- how 'self' is treated in a method call
  - e.g. iterator transformations move (consume) the old iterator and return a new one
  - but vector.push only takes a &mut self
  - "implicit" here meaning "when I look at the point it's used it's not obvious from just
  looking"
- iterating over a collection yields references to elements
- dereferencing a reference via dot


2017 day 7
==========

RUST
----
- I've made a horrible mess of owned everything
  - only later (when building the tree) I managed to get away
    with references
- slow Regex::new in debug mode - had to move it out of the
  parsing loop
- by the time I got to part 2 I had a reasonable intuition
  about references and could sense how building/traversing
  the tree will pan out
- took a lot of shortcuts like initializing mut with some
  stupid default value (let mut bad = 0); these should not be
  mut in the first place I guess
  - or reorder some code so that I can use a reference before
    I move something
  - all these should have been organized better
- regexes - well it's no python
  - first time I got 3 unwraps in 1 line
- it doesn't feel like a tool for quick and dirty solutions


2017 day 8
==========

CPP
---
- first time using regex in cpp; simple enough
- I'm probably unoptimal where I'm passing strings to cond & op functions
  - is there copying involved? wasted allocatoins? I dunno
- error messages from compiler are often scary
  sometimes it's just a wall of text and types
- using namespace std is bad, brings in a lot of names like "max", "min", "right"
  so my "int max" overrides it
- overall I think the solution is quite readable
