00 |  inp w      inp w      inp w      inp w      inp w      inp w      inp w      inp w      inp w      inp w      inp w      inp w      inp w      inp w

01 |  mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0
02 |  add x z    add x z    add x z    add x z    add x z    add x z    add x z    add x z    add x z    add x z    add x z    add x z    add x z    add x z
03 |  mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26
05 |  add x 12   add x 14   add x 11   add x -9   add x -7   add x 11   add x -1   add x -16  add x 11   add x -15  add x 10   add x 12   add x -4   add x 0
06 |  eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w    eql x w
07 |  eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0

04 |  div z 1    div z 1    div z 1    div z 26   div z 26   div z 1    div z 26   div z 26   div z 1    div z 26   div z 1    div z 1    div z 26   div z 26

08 |  mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0
09 |  add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25   add y 25
10 |  mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x
11 |  add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1    add y 1
12 |  mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y    mul z y

13 |  mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0
14 |  add y w    add y w    add y w    add y w    add y w    add y w    add y w    add y w    add y w    add y w    add y w    add y w    add y w    add y w
15 |  add y 15   add y 12   add y 15   add y 12   add y 15   add y 2    add y 11   add y 15   add y 10   add y 2    add y 0    add y 0    add y 15   add y 15
16 |  mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x    mul y x
17 |  add z y    add z y    add z y    add z y    add z y    add z y    add z y    add z y    add z y    add z y    add z y    add z y    add z y    add z y


3 zmienne na blok
- div04 - 1 albo 26 - dzielone z
- add05 - dodane przy sprawdzeniu !eql
- add15 - dodane na końcu do mnożnika


w := in
x := !eql(z % 26 + add05, w)
z := (z / div04) * (25 * x + 1) + (w + add15) * x


-------------------------------
04      | z /= div04
08 - 12 | z *= 25 * x + 1
13 - 17 | z += (w + add15) * x
-------------------------------


if (z % 26) + add05 == w:     // x == 0
  z = z / div04
else:                         // x == 1
  z = z / div04 * 26 + w + add15




NOTES
=====
- x, y nie przenoszą się między cyframi, są temporary do obliczeń dla cyfry
  - tylko z jest przenoszona między cyframi
- w nie zmienia się w trakcie obliczeń
- z nigdy nie będzie ujemne!
